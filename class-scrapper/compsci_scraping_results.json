{"COMPSCI C8": {"Title": "Foundations of Data Science", "Units": "4 Units", "Description": "Foundations of data science from three perspectives: inferential thinking, computational thinking, and real-world relevance. Given data arising from some real-world phenomenon, how does one analyze that data so as to understand that phenomenon? The course teaches critical concepts and skills in computer programming and statistical inference, in conjunction with hands-on analysis of real-world datasets, including economic data, document collections, geographical data, and social networks. It delves into social and legal issues surrounding data analysis, including issues of privacy and data ownership.", "Average Grade": "B+", "Prerequisites": "This course may be taken on its own, but students are encouraged to take it concurrently with a data science connector course (numbered 88 in a range of departments)"}, "COMPSCI 9A": {"Title": "Matlab for Programmers", "Units": "2 Units", "Description": "Introduction to the constructs in the Matlab programming language, aimed at students who already know how to program. Array and matrix operations, functions and function handles, control flow, plotting and image manipulation, cell arrays and structures, and the Symbolic Mathematics toolbox.", "Average Grade": "N/A", "Prerequisites": "Programming experience equivalent to that gained in COMPSCI 10; familiarity with applications of matrix processing"}, "COMPSCI 9C": {"Title": "C for Programmers", "Units": "2 Units", "Description": "Self-paced course in the C programming language for students who already know how to program. Computation, input and output, flow of control, functions, arrays, and pointers, linked structures, use of dynamic storage, and implementation of abstract data types.", "Average Grade": "N/A", "Prerequisites": "Programming experience with pointers (or addresses in assembly language) and linked data structures equivalent to that gained in COMPSCI 9B, COMPSCI 61A or ENGIN 7"}, "COMPSCI 9D": {"Title": "Scheme and Functional Programming for Programmers", "Units": "2 Units", "Description": "Self-paced course in functional programming, using the Scheme programming language, for students who already know how to program. Recursion; higher-order functions; list processing; implementation of rule-based querying.", "Average Grade": "N/A", "Prerequisites": "Programming experience similar to that gained in COMPSCI 10 or ENGIN 7"}, "COMPSCI 9E": {"Title": "Productive Use of the UNIX Environment", "Units": "2 Units", "Description": "Use of UNIX utilities and scripting facilities for customizing the programming environment, organizing files (possibly in more than one computer account), implementing a personal database, reformatting text, and searching for online resources.", "Average Grade": "N/A", "Prerequisites": "Programming experience similar to that gained in COMPSCI 61A or ENGIN 7; DOS or UNIX experience"}, "COMPSCI 9F": {"Title": "C++ for Programmers", "Units": "2 Units", "Description": "Self-paced introduction to the constructs provided in the C++ programming language for procedural and object-oriented programming, aimed at students who already know how to program.", "Average Grade": "N/A", "Prerequisites": "Programming experience equivalent to that gained in COMPSCI 61A or ENGIN 7"}, "COMPSCI 9G": {"Title": "JAVA for Programmers", "Units": "2 Units", "Description": "Self-paced course in Java for students who already know how to program. Applets; variables and computation; events and flow of control; classes and objects; inheritance; GUI elements; applications; arrays, strings, files, and linked structures; exceptions; threads.", "Average Grade": "N/A", "Prerequisites": "COMPSCI 9C, COMPSCI 9F, or COMPSCI 61A plus experience with object-oriented programming or C-based language"}, "COMPSCI 9H": {"Title": "Python for Programmers", "Units": "2 Units", "Description": "Introduction to the constructs provided in the Python programming language, aimed at students who already know how to program. Flow of control; strings, tuples, lists, and dictionaries; CGI programming; file input and output; object-oriented programming; GUI elements.", "Average Grade": "N/A", "Prerequisites": "Programming experience equivalent to that gained in COMPSCI 10"}, "COMPSCI 10": {"Title": "The Beauty and Joy of Computing", "Units": "4 Units", "Description": "An introductory course for students with minimal prior exposure to computer science. Prepares students for future computer science courses and empowers them to utilize programming to solve problems in their field of study. Presents an overview of the history, great principles, and transformative applications of computer science, as well as a comprehensive introduction to programming. Topics include abstraction, recursion, algorithmic complexity, higher-order functions, concurrency, social implications of computing (privacy, education, algorithmic bias), and engaging research areas (data science, AI, HCI). Students will program in Snap! (a friendly graphical language) and Python, and will design and implement two projects of their choice.", "Average Grade": "B+", "Prerequisites": "N/A"}, "COMPSCI W10": {"Title": "The Beauty and Joy of Computing", "Units": "4 Units", "Description": "This course meets the programming prerequisite for 61A. An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.", "Average Grade": "B+", "Prerequisites": "N/A"}, "COMPSCI 36": {"Title": "CS Scholars Seminar: The Educational Climate in CS & CS61A technical discussions", "Units": "2 Units", "Description": "Computer Science 36 is a seminar for CS Scholars who are concurrently taking CS61A: The Structure and Interpretation of Computer Programs. CS Scholars is a cohort-model program to provide support in exploring and potentially declaring a CS major for students with little to no computational background prior to coming to the university. CS 36 provides an introduction to the CS curriculum at UC Berkeley, and the overall CS landscape in both industry and academia\u2014through the lens of accessibility and its relevance to diversity. Additionally, CS36 provides technical instruction to review concepts in CS61A, in order to support CS Scholars\u2019 individual learning and success in the CS61A course.", "Average Grade": "N/A", "Prerequisites": "Prerequisite satisfied Concurrently: Participating in the CS Scholars program, and concurrently taking COMPSCI 61A"}, "COMPSCI 39": {"Title": "Freshman/Sophomore Seminar", "Units": "1.5 - 2 Units", "Description": "Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.", "Average Grade": "N/A", "Prerequisites": "Priority given to freshmen and sophomores"}, "COMPSCI 39J": {"Title": "Freshman/Sophomore Seminar", "Units": "1.5 - 4 Units", "Description": "Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.", "Average Grade": "N/A", "Prerequisites": "Priority given to freshmen and sophomores"}, "COMPSCI 39K": {"Title": "Freshman/Sophomore Seminar", "Units": "1.5 - 4 Units", "Description": "Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.", "Average Grade": "N/A", "Prerequisites": "Priority given to freshmen and sophomores"}, "COMPSCI 39M": {"Title": "Freshman/Sophomore Seminar", "Units": "1.5 - 4 Units", "Description": "Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.", "Average Grade": "N/A", "Prerequisites": "Priority given to freshmen and sophomores"}, "COMPSCI 39N": {"Title": "Freshman/Sophomore Seminar", "Units": "1.5 - 4 Units", "Description": "Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.", "Average Grade": "N/A", "Prerequisites": "Priority given to freshmen and sophomores"}, "COMPSCI 39P": {"Title": "Freshman/Sophomore Seminar", "Units": "1.5 - 4 Units", "Description": "Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.", "Average Grade": "N/A", "Prerequisites": "Priority given to freshmen and sophomores"}, "COMPSCI 39Q": {"Title": "Freshman/Sophomore Seminar", "Units": "1.5 - 4 Units", "Description": "Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.", "Average Grade": "N/A", "Prerequisites": "Priority given to freshmen and sophomores"}, "COMPSCI 39R": {"Title": "Freshman/Sophomore Seminar", "Units": "1.5 - 4 Units", "Description": "Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.", "Average Grade": "N/A", "Prerequisites": "Priority given to freshmen and sophomores"}, "COMPSCI 47A": {"Title": "Completion of Work in Computer Science 61A", "Units": "1 Unit", "Description": "Implementation of generic operations. Streams and iterators. Implementation techniques for supporting functional, object-oriented, and constraint-based programming in the Scheme programming language. Together with 9D, 47A constitutes an abbreviated, self-paced version of 61A for students who have already taken a course equivalent to 61B.", "Average Grade": "A-", "Prerequisites": "COMPSCI 61B, COMPSCI 9D, and consent of instructor"}, "COMPSCI 47B": {"Title": "Completion of Work in Computer Science 61B", "Units": "1 Unit", "Description": "Iterators. Hashing, applied to strings and multi-dimensional structures. Heaps. Storage management. Design and implementation of a program containing hundreds of lines of code. Students who have completed a portion of the subject matter of COMPSCI 61B may, with consent of instructor, complete COMPSCI 61B in this self-paced course. Please note that students in the College of Engineering are required to receive additional permission from the College as well as the EECS department for the course to count in place of COMPSCI 61B.", "Average Grade": "A-", "Prerequisites": "A course in data structures, COMPSCI 9G, and consent of instructor"}, "COMPSCI 47C": {"Title": "Completion of Work in Computer Science 61C", "Units": "1 Unit", "Description": "MIPS instruction set simulation. The assembly and linking process. Caches and virtual memory. Pipelined computer organization. Students with sufficient partial credit in 61C may, with consent of instructor, complete the credit in this self-paced course.", "Average Grade": "A", "Prerequisites": "Experience with assembly language including writing an interrupt handler, COMPSCI 9C, and consent of instructor"}, "COMPSCI 61A": {"Title": "The Structure and Interpretation of Computer Programs", "Units": "4 Units", "Description": "An introduction to programming and computer science focused on abstraction techniques as means to manage program complexity. Techniques include procedural abstraction; control abstraction using recursion, higher-order functions, generators, and streams; data abstraction using interfaces, objects, classes, and generic operators; and language abstraction using interpreters and macros. The course exposes students to programming paradigms, including functional, object-oriented, and declarative approaches. It includes an introduction to asymptotic analysis of algorithms. There are several significant programming projects.", "Average Grade": "B+", "Prerequisites": "MATH 1A (may be taken concurrently); programming experience equivalent to that gained from a score of 3 or above on the Advanced Placement Computer Science A exam"}, "COMPSCI 61B": {"Title": "Data Structures", "Units": "4 Units", "Description": "Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61A, COMPSCI 88, or ENGIN 7"}, "COMPSCI 61BL": {"Title": "Data Structures and Programming Methodology", "Units": "4 Units", "Description": "The same material as in 61B, but in a laboratory-based format.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61A, COMPSCI 88, or ENGIN 7"}, "COMPSCI 61C": {"Title": "Great Ideas of Computer Architecture (Machine Structures)", "Units": "4 Units", "Description": "The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61A, along with either COMPSCI 61B or COMPSCI 61BL, or programming experience equivalent to that gained in COMPSCI 9C, COMPSCI 9F, or COMPSCI 9G"}, "COMPSCI 61CL": {"Title": "Machine Structures (Lab-Centric)", "Units": "4 Units", "Description": "The same material as in 61C but in a lab-centric format.", "Average Grade": "B", "Prerequisites": "COMPSCI 61A, along with COMPSCI 61B or COMPSCI 61BL, or programming experience equivalent to that gained in COMPSCI 9C, COMPSCI 9F, or COMPSCI 9G"}, "COMPSCI W61A": {"Title": "The Structure and Interpretation of Computer Programs (Online)", "Units": "4 Units", "Description": "An introduction to programming and computer science focused on abstraction techniques as means to manage program complexity. Techniques include procedural abstraction; control abstraction using recursion, higher-order functions, generators, and streams; data abstraction using interfaces, objects, classes, and generic operators; and language abstraction using interpreters and macros. The course exposes students to programming paradigms, including functional, object-oriented, and declarative approaches. It includes an introduction to asymptotic analysis of algorithms. There are several significant programming projects.", "Average Grade": "B", "Prerequisites": "MATH 1A (may be taken concurrently); programming experience equivalent to that gained from a score of 3 or above on the Advanced Placement Computer Science A exam"}, "COMPSCI 70": {"Title": "Discrete Mathematics and Probability Theory", "Units": "4 Units", "Description": "Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.", "Average Grade": "B", "Prerequisites": "Sophomore mathematical maturity, and programming experience equivalent to that gained with a score of 3 or above on the Advanced Placement Computer Science A exam"}, "COMPSCI C79": {"Title": "Societal Risks and the Law", "Units": "3 Units", "Description": "Defining, perceiving, quantifying and measuring risk; identifying risks and estimating their importance; determining whether laws and regulations can protect us from these risks; examining how well existing laws work and how they could be improved; evaluting costs and benefits. Applications may vary by term. This course cannot be used to complete engineering unit or technical elective requirements for students in the College of Engineering.", "Average Grade": "B+", "Prerequisites": "N/A"}, "COMPSCI 84": {"Title": "Sophomore Seminar", "Units": "1 or 2 Units", "Description": "Sophomore seminars are small interactive courses offered by faculty members in departments all across the campus. Sophomore seminars offer opportunity for close, regular intellectual contact between faculty members and students in the crucial second year. The topics vary from department to department and semester to semester. Enrollment limited to 15 sophomores.", "Average Grade": "N/A", "Prerequisites": "At discretion of instructor"}, "COMPSCI C88C": {"Title": "Computational Structures in Data Science", "Units": "3 Units", "Description": "Development of Computer Science topics appearing in Foundations of Data Science (C8); expands computational concepts and techniques of abstraction. Understanding the structures that underlie the programs, algorithms, and languages used in data science and elsewhere. Mastery of a particular programming language while studying general techniques for managing program complexity, e.g., functional, object-oriented, and declarative programming. Provides practical experience with composing larger systems through several significant programming projects.", "Average Grade": "N/A", "Prerequisites": "This course is a Data Science connector course and may only be taken concurrently with or after COMPSCI C8/DATA C8/INFO C8/STAT C8. Students may take more than one Data Science connector (88) course if they wish, concurrent with or after having taken the C8 course"}, "COMPSCI 94": {"Title": "Special Topics", "Units": "1 - 4 Units", "Description": "Topics will vary semester to semester. See the Computer Science Division announcements.", "Average Grade": "B+", "Prerequisites": "Consent of instructor"}, "COMPSCI 97": {"Title": "Field Study", "Units": "1 - 4 Units", "Description": "Students take part in organized individual field sponsored programs with off-campus companies or tutoring/mentoring relevant to specific aspects and applications of computer science on or off campus. Note Summer CPT or OPT students: written report required. Course does not count toward major requirements, but will be counted in the cumulative units toward graduation.", "Average Grade": "N/A", "Prerequisites": "Consent of instructor (see department adviser)"}, "COMPSCI 98": {"Title": "Directed Group Study", "Units": "1 - 4 Units", "Description": "Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.", "Average Grade": "N/A", "Prerequisites": "Consent of instructor"}, "COMPSCI 99": {"Title": "Individual Study and Research for Undergraduates", "Units": "1 - 2 Units", "Description": "A course for lower division students in good standing who wish to undertake a program of individual inquiry initiated jointly by the student and a professor. There are no other formal prerequisites, but the supervising professor must be convinced that the student is able to profit by the program.", "Average Grade": "N/A", "Prerequisites": "GPA of 3.4 or better"}, "COMPSCI C100": {"Title": "Principles & Techniques of Data Science", "Units": "4 Units", "Description": "In this course, students will explore the data science lifecycle, including question formulation, data collection and cleaning, exploratory data analysis and visualization, statistical inference and prediction, and decision-making. This class will focus on quantitative critical thinking and key principles and techniques needed to carry out this cycle. These include languages for transforming, querying and analyzing data; algorithms for machine learning methods including regression, classification and clustering; principles behind creating informative data visualizations; statistical concepts of measurement error and prediction; and techniques for scalable data processing.", "Average Grade": "N/A", "Prerequisites": "COMPSCI C8 / DATA C8 / INFO C8 / STAT C8 with a C- or better, or Pass; and COMPSCI 61A, COMPSCI/DATA C88C, or ENGIN 7 with a C- or better, or Pass; Corequisite: MATH 54, 56 or EECS 16A (C- or better, or Pass, required if completed prior to Data C100)"}, "COMPSCI 146L": {"Title": "Programmable Digital Systems Laboratory", "Units": "2 Units", "Description": "Hardware description languages for digital system design and interactions with tool flows. Design, implementation, and verification of digital designs. Digital synthesis, partitioning, placement, routing, and simulation for Field-Programmable Gate Arrays. Large digital-system design concepts. Project design component \u2013 example, a full processor implementation with peripherals.", "Average Grade": "N/A", "Prerequisites": "COMPSCI 61C; EL ENG 105 recommended"}, "COMPSCI 152": {"Title": "Computer Architecture and Engineering", "Units": "4 Units", "Description": "Instruction set architecture, microcoding, pipelining (simple and complex). Memory hierarchies and virtual memory. Processor parallelism: VLIW, vectors, multithreading. Multiprocessors.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61C"}, "COMPSCI 160": {"Title": "User Interface Design and Development", "Units": "4 Units", "Description": "The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61B or COMPSCI 61BL"}, "COMPSCI 161": {"Title": "Computer Security", "Units": "4 Units", "Description": "Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61C; and COMPSCI 70 or MATH 55"}, "COMPSCI 162": {"Title": "Operating Systems and System Programming", "Units": "4 Units", "Description": "Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61B, COMPSCI 61C, and COMPSCI 70"}, "COMPSCI 164": {"Title": "Programming Languages and Compilers", "Units": "4 Units", "Description": "Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61B and COMPSCI 61C"}, "COMPSCI 168": {"Title": "Introduction to the Internet: Architecture and Protocols", "Units": "4 Units", "Description": "This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet's scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).", "Average Grade": "B+", "Prerequisites": "COMPSCI 61B and COMPSCI 162"}, "COMPSCI 169": {"Title": "Software Engineering", "Units": "4 Units", "Description": "Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61B and COMPSCI 61C; COMPSCI 70 or MATH 113"}, "COMPSCI 169A": {"Title": "Introduction to Software Engineering", "Units": "4 Units", "Description": "Ideas and techniques for designing, developing, and modifying large software systems. Service-oriented architecture, behavior-driven design with user stories, cloud computing, test-driven development, automated testing, cost and quality metrics for maintainability and effort estimation, practical performance and security in software operations, design patterns and refactoring, specification and documentation, agile project team organization and management.", "Average Grade": "A-", "Prerequisites": "COMPSCI 61A and COMPSCI 61B; COMPSCI 70 is recommended"}, "COMPSCI 169L": {"Title": "Software Engineering Team Project", "Units": "4 Units", "Description": "Open-ended design project enhancing or creating software for real customers in an agile team setting. Teamwork coordination, effective customer meetings, pre- and post-iteration team meetings, running scrums and standups, technical communication. Contributing as a team to an open-source project; tools and workflows associated with open source collaboration, including fork-and-pull, rebase, upstream merge, continuous deployment & integration.", "Average Grade": "A-", "Prerequisites": "COMPSCI 169A or COMPSCI W169A"}, "COMPSCI W169A": {"Title": "Software Engineering", "Units": "3 Units", "Description": "This course presents ideas and techniques for designing, developing, and modifying large software systems using Agile techniques and tools. Topics include: function-oriented and object-oriented modular design techniques, designing for re-use and maintainability including proper use of design patterns, behavior-driven design, test-driven development, user stories for requirements elicitation & documentation, verification and validation, cost and quality metrics and estimation, project team organization and management, analyzing and refactoring legacy code.", "Average Grade": "A-", "Prerequisites": "COMPSCI 61A and COMPSCI 61B"}, "COMPSCI 170": {"Title": "Efficient Algorithms and Intractable Problems", "Units": "4 Units", "Description": "Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61B and COMPSCI 70"}, "COMPSCI 171": {"Title": "Cryptography", "Units": "4 Units", "Description": "Cryptography or cryptology is the science of designing algorithms and protocols for enabling parties to communicate and compute securely in an untrusted environment (e.g. secure communication, digital signature, etc.) Over the last four decades, cryptography has transformed from an ad hoc collection of mysterious tricks into a rigorous science based on firm complexity-theoretic foundations. This modern complexity-theoretic approach to cryptography will be the focus. E.g., in the context of encryption we will begin by giving a precise mathematical definition for what it means to be a secure encryption scheme and then give a construction (realizing this security notion) assuming various computational hardness assumptions (e.g. factoring).", "Average Grade": "A-", "Prerequisites": "COMPSCI 70"}, "COMPSCI 172": {"Title": "Computability and Complexity", "Units": "4 Units", "Description": "Finite automata, Turing machines and RAMs. Undecidable, exponential, and polynomial-time problems. Polynomial-time equivalence of all reasonable models of computation. Nondeterministic Turing machines. Theory of NP-completeness: Cook's theorem, NP-completeness of basic problems. Selected topics in language theory, complexity and randomness.", "Average Grade": "B+", "Prerequisites": "COMPSCI 170"}, "COMPSCI 174": {"Title": "Combinatorics and Discrete Probability", "Units": "4 Units", "Description": "Permutations, combinations, principle of inclusion and exclusion, generating functions, Ramsey theory. Expectation and variance, Chebychev's inequality, Chernov bounds. Birthday paradox, coupon collector's problem, Markov chains and entropy computations, universal hashing, random number generation, random graphs and probabilistic existence bounds.", "Average Grade": "B", "Prerequisites": "COMPSCI 170"}, "COMPSCI 176": {"Title": "Algorithms for Computational Biology", "Units": "4 Units", "Description": "Algorithms and probabilistic models that arise in various computational biology applications: suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, genome rearrangements, hidden Markov models, gene finding, motif finding, stochastic context free grammars, RNA secondary structure. There are no biology prerequisites for this course, but a strong quantitative background will be essential.", "Average Grade": "B+", "Prerequisites": "COMPSCI 70 and COMPSCI 170; experience programming in a language such as C, C++, Java, or Python"}, "COMPSCI C176": {"Title": "Algorithms for Computational Biology", "Units": "4 Units", "Description": "This course will provide familiarity with algorithms and probabilistic models that arise in various computational biology applications, such as suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, hidden Markov models, gene finding, motif finding, linear/logistic regression, random forests, convolutional neural networks, genome-wide association studies, pathogenicity prediction, and sequence-to-epigenome prediction.", "Average Grade": "B+", "Prerequisites": "COMPSCI 70 and COMPSCI 170, MATH 54 or EECS 16A or an equivalent linear algebra course"}, "COMPSCI C177": {"Title": "Algorithmic Economics", "Units": "4 Units", "Description": "The class provides an introduction to algorithmic questions in economic design. The class will cover problems of public goods and social choice, as well as allocative questions and private consumption. The focus is on normative questions: From the perspective of social goals, these are efficiency, fairness, and equity. In terms of private goals, the focus is on revenue maximization. The course will cover voting, fair division, pricing and market mechanisms. There is an emphasis on the algorithmic questions that arise naturally in economic design.", "Average Grade": "N/A", "Prerequisites": "Students should be comfortable with formal mathematical proofs, and will be expected to write proofs on their own"}, "COMPSCI 180": {"Title": "Intro to Computer Vision and Computational Photography", "Units": "4 Units", "Description": "This advanced undergraduate course introduces students to computing with visual data (images and video). We will cover acquisition, representation, and manipulation of visual information from digital photographs (image processing), image analysis and visual understanding (computer vision), and image synthesis (computational photography). Key algorithms will be presented, ranging from classical to contemporary, with an emphasis on using these techniques to build practical systems. The hands-on emphasis will be reflected in the programming assignments, where students will acquire their own images and develop, largely from scratch, image analysis and synthesis tools for real-world applications.", "Average Grade": "N/A", "Prerequisites": "COMPSCI 61B, COMPSCI 70, and MATH 53 (or other vector calculus course). MATH 54, MATH 110, or EECS 16A. COMPSCI 182 is strongly recommended"}, "COMPSCI 182": {"Title": "Designing, Visualizing and Understanding Deep Neural Networks", "Units": "4 Units", "Description": "practical implementations, empirical studies, and scientific analyses.\" This course attempts to cover that ground.", "Average Grade": "A-", "Prerequisites": "MATH 53, MATH 54, and COMPSCI 61B; COMPSCI 70 or STAT 134; COMPSCI 189 is recommended"}, "COMPSCI 184": {"Title": "Foundations of Computer Graphics", "Units": "4 Units", "Description": "Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61B or COMPSCI 61BL; programming skills in C, C++, or Java; linear algebra and calculus"}, "COMPSCI 186": {"Title": "Introduction to Database Systems", "Units": "4 Units", "Description": "Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61C or COMPSCI 47C. COMPSCI 47C may be taken as a co-requisite for transfer students"}, "COMPSCI W186": {"Title": "Introduction to Database Systems", "Units": "4 Units", "Description": "Broad introduction to systems for storing, querying, updating and managing large databases. Computer science skills synthesizing viewpoints from low-level systems architecture to high-level modeling and declarative logic. System internals, including the complex details of query optimization and execution, concurrency control, indexing, and memory management. More abstract issues in query languages and data modeling \u2013 students are exposed to formal relational languages, SQL, full-text search, entity-relationship modeling, normalization, and physical database design. Recent technological trends in the field, including \u201cBig Data\u201d programming libraries like MapReduce, and distributed key-value stores with various consistency models.", "Average Grade": "A-", "Prerequisites": "COMPSCI 61B and COMPSCI 61C"}, "COMPSCI 188": {"Title": "Introduction to Artificial Intelligence", "Units": "4 Units", "Description": "Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.", "Average Grade": "B+", "Prerequisites": "COMPSCI 61A, COMPSCI 61B, and COMPSCI 70"}, "COMPSCI 189": {"Title": "Introduction to Machine Learning", "Units": "4 Units", "Description": "Theoretical foundations, algorithms, methodologies, and applications for machine learning. Topics may include supervised methods for regression and classication (linear models, trees, neural networks, ensemble methods, instance-based methods); generative and discriminative probabilistic models; Bayesian parametric learning; density estimation and clustering; Bayesian networks; time series models; dimensionality reduction; programming projects covering a variety of real-world applications.", "Average Grade": "B+", "Prerequisites": "MATH 53 and MATH 54; and COMPSCI 70 or consent of instructor"}, "COMPSCI C191": {"Title": "Introduction to Quantum Computing", "Units": "4 Units", "Description": "This multidisciplinary course provides an introduction to fundamental conceptual aspects of quantum mechanics from a computational and informational theoretic perspective, as well as physical implementations and technological applications of quantum information science. Basic sections of quantum algorithms, complexity, and cryptography, will be touched upon, as well as pertinent physical realizations from nanoscale science and engineering.", "Average Grade": "A-", "Prerequisites": "Linear Algebra (EECS 16A or PHYSICS 89 or MATH 54) AND either discrete mathematics (COMPSCI 70 or MATH 55), or quantum mechanics (PHYSICS 7C or PHYSICS 137A or CHEM 120A)"}, "COMPSCI 194": {"Title": "Special Topics", "Units": "1 - 4 Units", "Description": "Topics will vary semester to semester. See the Computer Science Division announcements.", "Average Grade": "A-", "Prerequisites": "Consent of instructor"}, "COMPSCI 195": {"Title": "Social Implications of Computer Technology", "Units": "1 Unit", "Description": "Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on additional topics.", "Average Grade": "N/A", "Prerequisites": "N/A"}, "COMPSCI H195": {"Title": "Honors Social Implications of Computer Technology", "Units": "3 Units", "Description": "Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students may lead discussions on additional topics.", "Average Grade": "N/A", "Prerequisites": "N/A"}, "COMPSCI H196A": {"Title": "Senior Honors Thesis Research", "Units": "1 - 4 Units", "Description": "Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a major in Computer Science.", "Average Grade": "N/A", "Prerequisites": "Open only to students in the computer science honors program"}, "COMPSCI H196B": {"Title": "Senior Honors Thesis Research", "Units": "1 - 4 Units", "Description": "Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a major in Computer Science.", "Average Grade": "N/A", "Prerequisites": "Open only to students in the computer science honors program"}, "COMPSCI 197": {"Title": "Field Study", "Units": "1 - 4 Units", "Description": "Students take part in organized individual field sponsored programs with off-campus companies or tutoring/mentoring relevant to specific aspects and applications of computer science on or off campus. Note Summer CPT or OPT students: written report required. Course does not count toward major requirements, but will be counted in the cumulative units toward graduation.", "Average Grade": "N/A", "Prerequisites": "Consent of instructor (see department adviser)"}, "COMPSCI 198": {"Title": "Directed Group Studies for Advanced Undergraduates", "Units": "1 - 4 Units", "Description": "Group study of selected topics in Computer Sciences, usually relating to new developments.", "Average Grade": "N/A", "Prerequisites": "2.0 GPA or better; 60 units completed"}, "COMPSCI 199": {"Title": "Supervised Independent Study", "Units": "1 - 4 Units", "Description": "Supervised independent study. Enrollment restrictions apply.", "Average Grade": "N/A", "Prerequisites": "Consent of instructor and major adviser"}, "COMPSCI C200A": {"Title": "Principles and Techniques of Data Science", "Units": "4 Units", "Description": "Explores the data science lifecycle: question formulation, data collection and cleaning, exploratory, analysis, visualization, statistical inference, prediction, and decision-making. Focuses on quantitative critical thinking and key principles and techniques: languages for transforming, querying and analyzing data; algorithms for machine learning methods: regression, classification and clustering; principles of informative visualization; measurement error and prediction; and techniques for scalable data processing. Research term project.", "Average Grade": "N/A", "Prerequisites": "COMPSCI C8 / INFO C8 / STAT C8 or ENGIN 7; and either COMPSCI 61A or COMPSCI 88. Corequisites: MATH 54 or EECS 16A"}, "COMPSCI C249A": {"Title": "Introduction to Embedded Systems", "Units": "4 Units", "Description": "This course introduces students to the basics of models, analysis tools, and control for embedded systems operating in real time. Students learn how to combine physical processes with computation. Topics include models of computation, control, analysis and verification, interfacing with the physical world, mapping to platforms, and distributed embedded systems. The course has a strong laboratory component, with emphasis on a semester-long sequence of projects.", "Average Grade": "A-", "Prerequisites": "N/A"}, "COMPSCI 250": {"Title": "VLSI Systems Design", "Units": "4 Units", "Description": "Unified top-down and bottom-up design of integrated circuits and systems concentrating on architectural and topological issues. VLSI architectures, systolic arrays, self-timed systems. Trends in VLSI development. Physical limits. Tradeoffs in custom-design, standard cells, gate arrays. VLSI design tools.", "Average Grade": "A", "Prerequisites": "COMPSCI 150"}, "COMPSCI 252A": {"Title": "Graduate Computer Architecture", "Units": "4 Units", "Description": "Graduate survey of contemporary computer organizations covering: early systems, CPU design, instruction sets, control, processors, busses, ALU, memory, I/O interfaces, connection networks, virtual memory, pipelined computers, multiprocessors, and case studies. Term paper or project is required.", "Average Grade": "A", "Prerequisites": "COMPSCI 61C"}, "COMPSCI 260A": {"Title": "User Interface Design and Development", "Units": "4 Units", "Description": "The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.", "Average Grade": "A-", "Prerequisites": "COMPSCI 61B, COMPSCI 61BL, or consent of instructor"}, "COMPSCI 260B": {"Title": "Human-Computer Interaction Research", "Units": "3 Units", "Description": "This course is a broad introduction to conducting research in Human-Computer Interaction. Students will become familiar with seminal and recent literature; learn to review and critique research papers; re-implement and evaluate important existing systems; and gain experience in conducting research. Topics include input devices, computer-supported cooperative work, crowdsourcing, design tools, evaluation methods, search and mobile interfaces, usable security, help and tutorial systems.", "Average Grade": "N/A", "Prerequisites": "COMPSCI 160 recommended, or consent of instructor"}, "COMPSCI 261": {"Title": "Security in Computer Systems", "Units": "3 Units", "Description": "Graduate survey of modern topics in computer security, including protection, access control, distributed access security, firewalls, secure coding practices, safe languages, mobile code, and case studies from real-world systems. May also cover cryptographic protocols, privacy and anonymity, and/or other topics as time permits.", "Average Grade": "A", "Prerequisites": "COMPSCI 162"}, "COMPSCI 261N": {"Title": "Internet and Network Security", "Units": "4 Units", "Description": "Develops a thorough grounding in Internet and network security suitable for those interested in conducting research in the area or those more broadly interested in security or networking. Potential topics include denial-of-service; capabilities; network intrusion detection/prevention; worms; forensics; scanning; traffic analysis; legal issues; web attacks; anonymity; wireless and networked devices; honeypots; botnets; scams; underground economy; attacker infrastructure; research pitfalls.", "Average Grade": "A-", "Prerequisites": "EL ENG 122 or equivalent; and COMPSCI 161 or familiarity with basic security concepts"}, "COMPSCI 262A": {"Title": "Advanced Topics in Computer Systems", "Units": "4 Units", "Description": "Graduate survey of systems for managing computation and information, covering a breadth of topics: early systems; volatile memory management, including virtual memory and buffer management; persistent memory systems, including both file systems and transactional storage managers; storage metadata, physical vs. logical naming, schemas, process scheduling, threading and concurrency control; system support for networking, including remote procedure calls, transactional RPC, TCP, and active messages; security infrastructure; extensible systems and APIs; performance analysis and engineering of large software systems. Homework assignments, exam, and term paper or project required.", "Average Grade": "A-", "Prerequisites": "COMPSCI 162 and entrance exam"}, "COMPSCI 262B": {"Title": "Advanced Topics in Computer Systems", "Units": "3 Units", "Description": "Continued graduate survey of large-scale systems for managing information and computation. Topics include basic performance measurement; extensibility, with attention to protection, security, and management of abstract data types; index structures, including support for concurrency and recovery; parallelism, including parallel architectures, query processing and scheduling; distributed data management, including distributed and mobile file systems and databases; distributed caching; large-scale data analysis and search. Homework assignments, exam, and term paper or project required.", "Average Grade": "A", "Prerequisites": "COMPSCI 262A"}, "COMPSCI 263": {"Title": "Design of Programming Languages", "Units": "3 Units", "Description": "Selected topics from: analysis, comparison, and design of programming languages, formal description of syntax and semantics, advanced programming techniques, structured programming, debugging, verification of programs and compilers, and proofs of correctness.", "Average Grade": "A-", "Prerequisites": "COMPSCI 164"}, "COMPSCI 264": {"Title": "Implementation of Programming Languages", "Units": "4 Units", "Description": "Compiler construction. Lexical analysis, syntax analysis. Semantic analysis code generation and optimization. Storage management. Run-time organization.", "Average Grade": "A", "Prerequisites": "COMPSCI 164; COMPSCI 263 recommended"}, "COMPSCI 265": {"Title": "Compiler Optimization and Code Generation", "Units": "3 Units", "Description": "Table-driven and retargetable code generators. Register management. Flow analysis and global optimization methods. Code optimization for advanced languages and architectures. Local code improvement. Optimization by program transformation. Selected additional topics. A term paper or project is required.", "Average Grade": "N/A", "Prerequisites": "COMPSCI 164"}, "COMPSCI C267": {"Title": "Applications of Parallel Computers", "Units": "3 - 4 Units", "Description": "Models for parallel programming. Overview of parallelism in scientific applications and study of parallel algorithms for linear algebra, particles, meshes, sorting, FFT, graphs, machine learning, etc. Survey of parallel machines and machine structures. Programming shared- and distributed-memory parallel computers, GPUs, and cloud platforms. Parallel programming languages, compilers, libraries and toolboxes. Data partitioning techniques. Techniques for synchronization and load balancing. Detailed study and algorithm/program development of medium sized applications.", "Average Grade": "A-", "Prerequisites": "No formal pre-requisites. Prior programming experience with a low-level language such as C, C++, or Fortran is recommended but not required. CS C267 is intended to be useful for students from many departments and with different backgrounds, although we will assume reasonable programming skills in a conventional (non-parallel) language, as well as enough mathematical skills to understand the problems and algorithmic solutions presented"}, "COMPSCI W267": {"Title": "Applications of Parallel Computers", "Units": "3 Units", "Description": "Parallel programming, from laptops to supercomputers to the cloud. Goals include writing programs that run fast while minimizing programming effort. Parallel architectures and programming languages and models, including shared memory (eg OpenMP on your multicore laptop), distributed memory (MPI and UPC on a supercomputer), GPUs (CUDA and OpenCL), and cloud (MapReduce, Hadoop and Spark). Parallel algorithms and software tools for common computations (eg dense and sparse linear algebra, graphs, structured grids). Tools for load balancing, performance analysis, debugging. How high level applications are built (eg climate modeling). On-line lectures and office hours.", "Average Grade": "N/A", "Prerequisites": "Computer Science W266 or the consent of the instructor"}, "COMPSCI 268": {"Title": "Computer Networks", "Units": "3 Units", "Description": "Distributed systems, their notivations, applications, and organization. The network component. Network architectures. Local and long-haul networks, technologies, and topologies. Data link, network, and transport protocols. Point-to-point and broadcast networks. Routing and congestion control. Higher-level protocols. Naming. Internetworking. Examples and case studies.", "Average Grade": "A-", "Prerequisites": "COMPSCI 162"}, "COMPSCI 270": {"Title": "Combinatorial Algorithms and Data Structures", "Units": "3 Units", "Description": "Design and analysis of efficient algorithms for combinatorial problems. Network flow theory, matching theory, matroid theory; augmenting-path algorithms; branch-and-bound algorithms; data structure techniques for efficient implementation of combinatorial algorithms; analysis of data structures; applications of data structure techniques to sorting, searching, and geometric problems.", "Average Grade": "A", "Prerequisites": "COMPSCI 170"}, "COMPSCI 271": {"Title": "Randomness and Computation", "Units": "3 Units", "Description": "Computational applications of randomness and computational theories of randomness. Approximate counting and uniform generation of combinatorial objects, rapid convergence of random walks on expander graphs, explicit construction of expander graphs, randomized reductions, Kolmogorov complexity, pseudo-random number generation, semi-random sources.", "Average Grade": "A-", "Prerequisites": "COMPSCI 170 and at least one course from the following: COMPSCI 270 - COMPSCI 279"}, "COMPSCI 273": {"Title": "Foundations of Parallel Computation", "Units": "3 Units", "Description": ". Fundamental theoretical issues in designing parallel algorithms and architectures. Shared memory models of parallel computation. Parallel algorithms for linear algegra, sorting, Fourier Transform, recurrence evaluation, and graph problems. Interconnection network based models. Algorithm design techniques for networks like hypercubes, shuffle-exchanges, threes, meshes and butterfly networks. Systolic arrays and techniques for generating them. Message routing.", "Average Grade": "N/A", "Prerequisites": "COMPSCI 170, or consent of instructor"}, "COMPSCI 274": {"Title": "Computational Geometry", "Units": "3 Units", "Description": ". Constructive problems in computational geometry: convex hulls, triangulations, Voronoi diagrams, arrangements of hyperplanes; relationships among these problems. Search problems: advanced data structures; subdivision search; various kinds of range searches. Models of computation; lower bounds.", "Average Grade": "A-", "Prerequisites": "COMPSCI 170"}, "COMPSCI 276": {"Title": "Cryptography", "Units": "3 Units", "Description": "Graduate survey of modern topics on theory, foundations, and applications of modern cryptography. One-way functions; pseudorandomness; encryption; authentication; public-key cryptosystems; notions of security. May also cover zero-knowledge proofs, multi-party cryptographic protocols, practical applications, and/or other topics, as time permits.", "Average Grade": "A-", "Prerequisites": "COMPSCI 170"}, "COMPSCI 280A": {"Title": "Intro to Computer Vision and Computational Photography", "Units": "4 Units", "Description": "This course introduces students to computing with visual data (images and video). We will cover acquisition, representation, and manipulation of visual information from digital photographs (image processing), image analysis and visual understanding (computer vision), and image synthesis (computational photography). Key algorithms will be presented, ranging from classical to contemporary, with an emphasis on using these techniques to build practical systems. The hands-on emphasis will be reflected in the programming assignments, where students will acquire their own images and develop, largely from scratch, image analysis and synthesis tools for real-world applications.", "Average Grade": "N/A", "Prerequisites": "CS61B, enough programming experience to debug complicated programs without much help. CS70 Math 53 (or another vector calculus course) Math 54, Math 110, or equivalent like EECS16A Strongly recommended: CS182"}, "COMPSCI C280": {"Title": "Computer Vision", "Units": "3 Units", "Description": "Paradigms for computational vision. Relation to human visual perception. Mathematical techniques for representing and reasoning, with curves, surfaces and volumes. Illumination and reflectance models. Color perception. Image segmentation and aggregation. Methods for bottom-up three dimensional shape recovery: Line drawing analysis, stereo, shading, motion, texture. Use of object models for prediction and recognition.", "Average Grade": "A", "Prerequisites": "MATH 1A; MATH 1B; MATH 53; and MATH 54 (Knowledge of linear algebra and calculus)"}, "COMPSCI C281A": {"Title": "Statistical Learning Theory", "Units": "3 Units", "Description": "Classification regression, clustering, dimensionality, reduction, and density estimation. Mixture models, hierarchical models, factorial models, hidden Markov, and state space models, Markov properties, and recursive algorithms for general probabilistic inference nonparametric methods including decision trees, kernal methods, neural networks, and wavelets. Ensemble methods.", "Average Grade": "A", "Prerequisites": "N/A"}, "COMPSCI C281B": {"Title": "Advanced Topics in Learning and Decision Making", "Units": "3 Units", "Description": "Recent topics include: Graphical models and approximate inference algorithms. Markov chain Monte Carlo, mean field and probability propagation methods. Model selection and stochastic realization. Bayesian information theoretic and structural risk minimization approaches. Markov decision processes and partially observable Markov decision processes. Reinforcement learning.", "Average Grade": "A", "Prerequisites": "N/A"}, "COMPSCI 282A": {"Title": "Designing, Visualizing and Understanding Deep Neural Networks", "Units": "4 Units", "Description": "Deep Networks have revolutionized computer vision, language technology, robotics and control. They have growing impact in many other areas of science and engineering. They do not however, follow a closed or compact set of theoretical principles. In Yann Lecun's words they require \"an interplay between intuitive insights, theoretical modeling, practical implementations, empirical studies, and scientific analyses.\" This course attempts to cover that ground.", "Average Grade": "A-", "Prerequisites": "MATH 53 and MATH 54 or equivalent; COMPSCI 70 or STAT 134; COMPSCI 61B or equivalent; COMPSCI 189 or COMPSCI 289A (recommended)"}, "COMPSCI 284A": {"Title": "Foundations of Computer Graphics", "Units": "4 Units", "Description": "Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations.", "Average Grade": "A-", "Prerequisites": "COMPSCI 61B or COMPSCI 61BL; programming skills in C, C++, or Java; linear algebra and calculus; or consent of instructor"}, "COMPSCI 284B": {"Title": "Advanced Computer Graphics Algorithms and Techniques", "Units": "4 Units", "Description": "This course provides a graduate-level introduction to advanced computer graphics algorithms and techniques. Students should already be familiar with basic concepts such as transformations, scan-conversion, scene graphs, shading, and light transport. Topics covered in this course include global illumination, mesh processing, subdivision surfaces, basic differential geometry, physically based animation, inverse kinematics, imaging and computational photography, and precomputed light transport.", "Average Grade": "A-", "Prerequisites": "COMPSCI 184"}, "COMPSCI 285": {"Title": "Deep Reinforcement Learning, Decision Making, and Control", "Units": "3 Units", "Description": "Intersection of control, reinforcement learning, and deep learning. Deep learning methods, which train large parametric function approximators, achieve excellent results on problems that require reasoning about unstructured real-world situations (e.g., computer vision, speech recognition, NLP). Advanced treatment of the reinforcement learning formalism, the most critical model-free reinforcement learning algorithms (policy gradients, value function and Q-function learning, and actor-critic), a discussion of model-based reinforcement learning algorithms, an overview of imitation learning, and a range of advanced topics (e.g., exploration, model-based learning with video prediction, transfer learning, multi-task learning, and meta-learning).", "Average Grade": "A-", "Prerequisites": "COMPSCI 189 or COMPSCI 289A or equivalent"}, "COMPSCI 286": {"Title": "Implementation of Data Base Systems", "Units": "3 Units", "Description": "Implementation of data base systems on modern hardware systems. Considerations concerning operating system design, including buffering, page size, prefetching, etc. Query processing algorithms, design of crash recovery and concurrency control systems. Implementation of distributed data bases and data base machines.", "Average Grade": "N/A", "Prerequisites": "COMPSCI 162 and COMPSCI 186; or COMPSCI 286A"}, "COMPSCI 286A": {"Title": "Introduction to Database Systems", "Units": "4 Units", "Description": "Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.", "Average Grade": "A-", "Prerequisites": "COMPSCI 61B and COMPSCI 61C"}, "COMPSCI 287": {"Title": "Advanced Robotics", "Units": "3 Units", "Description": "Advanced topics related to current research in algorithms and artificial intelligence for robotics. Planning, control, and estimation for realistic robot systems, taking into account: dynamic constraints, control and sensing uncertainty, and non-holonomic motion constraints.", "Average Grade": "A", "Prerequisites": "Instructor consent for undergraduate and masters students"}, "COMPSCI 287H": {"Title": "Algorithmic Human-Robot Interaction", "Units": "4 Units", "Description": "We will contrast existing algorithms in robotics with studies in human-robot interaction, discussing how to tackle interaction challenges in an algorithmic way, with the goal of enabling generalization across robots and tasks. We will also sharpen research skills: giving good talks, experimental design, statistical analysis, literature surveys.", "Average Grade": "A-", "Prerequisites": "N/A"}, "COMPSCI 288": {"Title": "Natural Language Processing", "Units": "4 Units", "Description": "Methods and models for the analysis of natural (human) language data. Topics include: language modeling, speech recognition, linguistic analysis (syntactic parsing, semantic analysis, reference resolution, discourse modeling), machine translation, information extraction, question answering, and computational linguistics techniques.", "Average Grade": "A", "Prerequisites": "COMPSCI 188; and COMPSCI 170 is recommended"}, "COMPSCI 289A": {"Title": "Introduction to Machine Learning", "Units": "4 Units", "Description": "This course provides an introduction to theoretical foundations, algorithms, and methodologies for machine learning, emphasizing the role of probability and optimization and exploring a variety of real-world applications. Students are expected to have a solid foundation in calculus and linear algebra as well as exposure to the basic tools of logic and probability, and should be familiar with at least one modern, high-level programming language.", "Average Grade": "A-", "Prerequisites": "MATH 53, MATH 54, COMPSCI 70, and COMPSCI 188; or consent of instructor"}, "COMPSCI 294": {"Title": "Special Topics", "Units": "1 - 4 Units", "Description": "Topics will vary from semester to semester. See Computer Science Division announcements.", "Average Grade": "A", "Prerequisites": "N/A"}, "COMPSCI 297": {"Title": "Field Studies in Computer Science", "Units": "12.0 Units", "Description": "Supervised experience in off-campus companies relevant to specific aspects and applications of electrical engineering and/or computer science. Written report required at the end of the semester.", "Average Grade": "N/A", "Prerequisites": "N/A"}, "COMPSCI 298": {"Title": "Group Studies Seminars, or Group Research", "Units": "1 - 4 Units", "Description": "Advanced study in various subjects through seminars on topics to be selected each year, informal group studies of special problems, group participation in comprehensive design problems, or group research on complete problems for analysis and experimentation.", "Average Grade": "A", "Prerequisites": "N/A"}, "COMPSCI 299": {"Title": "Individual Research", "Units": "1 - 12 Units", "Description": "Investigations of problems in computer science.", "Average Grade": "A", "Prerequisites": "N/A"}, "COMPSCI 300": {"Title": "Teaching Practice", "Units": "1 - 6 Units", "Description": "Supervised teaching practice, in either a one-on-one tutorial or classroom discussion setting.", "Average Grade": "N/A", "Prerequisites": "N/A"}, "COMPSCI 302": {"Title": "Designing Computer Science Education", "Units": "3 Units", "Description": "Discussion and review of research and practice relating to the teaching of computer science: knowledge organization and misconceptions, curriculum and topic organization, evaluation, collaborative learning, technology use, and administrative issues. As part of a semester-long project to design a computer science course, participants invent and refine a variety of homework and exam activities, and evaluate alternatives for textbooks, grading and other administrative policies, and innovative uses of technology.", "Average Grade": "A", "Prerequisites": "COMPSCI 301 and two semesters of GSI experience"}, "COMPSCI 370": {"Title": "Adaptive Instruction Methods in Computer Science", "Units": "3 Units", "Description": "This is a course for aspiring teachers or those who want to instruct with expertise from evidence-based research and proven equity-oriented practices. It provides pedagogical training by introducing the big ideas of teaching and learning, and illustrating how to put them into practice. The course is divided into three sections\u2014instructing the individual; a group; and psycho-social factors that affect learning at any level. These sections are designed to enhance any intern\u2019s, tutor\u2019s, or TA\u2019s teaching skillset. Class is discussion based, and covers theoretical and practical pedagogical aspects to teaching in STEM. An integral feature of the course involves providing weekly tutoring sessions.", "Average Grade": "A", "Prerequisites": "Prerequisite satisfied Concurrently: experience tutoring or as an academic intern; or concurrently serving as an academic intern while taking course"}, "COMPSCI 375": {"Title": "Teaching Techniques for Computer Science", "Units": "2 Units", "Description": "Discussion and practice of techniques for effective teaching, focusing on issues most relevant to teaching assistants in computer science courses.", "Average Grade": "N/A", "Prerequisites": "Consent of instructor"}, "COMPSCI 399": {"Title": "Professional Preparation: Supervised Teaching of Computer Science", "Units": "1 or 2 Units", "Description": "Discussion, problem review and development, guidance of computer science laboratory sections, course development, supervised practice teaching.", "Average Grade": "N/A", "Prerequisites": "Appointment as graduate student instructor"}, "COMPSCI 602": {"Title": "Individual Study for Doctoral Students", "Units": "1 - 8 Units", "Description": "Individual study in consultation with the major field adviser, intended to provide an opportunity for qualified students to prepare themselves for the various examinations required of candidates for the Ph.D. (and other doctoral degrees).", "Average Grade": "N/A", "Prerequisites": "N/A"}}